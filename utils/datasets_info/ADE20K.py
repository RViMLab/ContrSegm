from typing import Any


class EasyDict(dict):
    """Convenience class that behaves like a dict but allows access with the attribute syntax."""

    def __getattr__(self, name: str) -> Any:
        try:
            return self[name]
        except KeyError:
            raise AttributeError(name)

    def __setattr__(self, name: str, value: Any) -> None:
        self[name] = value

    def __delattr__(self, name: str) -> None:
        del self[name]


categories_exp0 = {
    'flat': [1, 2],
}

categories_exp1 = {
    'flat': [1, 2],
}

class_remapping_exp0 = {
    0:[255],
    1: [1],
    2: [2],
    3: [3],
    4: [4],
    5: [5],
    6: [6],
    7: [7],
    8: [8],
    9: [9],
    10: [10],
    11: [11],
    12: [12],
    13: [13],
    14: [14],
    15: [15],
    16: [16],
    17: [17],
    18: [18],
    19: [19],
    20: [20],
    21: [21],
    22: [22],
    23: [23],
    24: [24],
    25: [25],
    26: [26],
    27: [27],
    28: [28],
    29: [29],
    30: [30],
    31: [31],
    32: [32],
    33: [33],
    34: [34],
    35: [35],
    36: [36],
    37: [37],
    38: [38],
    39: [39],
    40: [40],
    41: [41],
    42: [42],
    43: [43],
    44: [44],
    45: [45],
    46: [46],
    47: [47],
    48: [48],
    49: [49],
    50: [50],
    51: [51],
    52: [52],
    53: [53],
    54: [54],
    55: [55],
    56: [56],
    57: [57],
    58: [58],
    59: [59],
    60: [60],
    61: [61],
    62: [62],
    63: [63],
    64: [64],
    65: [65],
    66: [66],
    67: [67],
    68: [68],
    69: [69],
    70: [70],
    71: [71],
    72: [72],
    73: [73],
    74: [74],
    75: [75],
    76: [76],
    77: [77],
    78: [78],
    79: [79],
    80: [80],
    81: [81],
    82: [82],
    83: [83],
    84: [84],
    85: [85],
    86: [86],
    87: [87],
    88: [88],
    89: [89],
    90: [90],
    91: [91],
    92: [92],
    93: [93],
    94: [94],
    95: [95],
    96: [96],
    97: [97],
    98: [98],
    99: [99],
    100: [100],
    101: [101],
    102: [102],
    103: [103],
    104: [104],
    105: [105],
    106: [106],
    107: [107],
    108: [108],
    109: [109],
    110: [110],
    111: [111],
    112: [112],
    113: [113],
    114: [114],
    115: [115],
    116: [116],
    117: [117],
    118: [118],
    119: [119],
    120: [120],
    121: [121],
    122: [122],
    123: [123],
    124: [124],
    125: [125],
    126: [126],
    127: [127],
    128: [128],
    129: [129],
    130: [130],
    131: [131],
    132: [132],
    133: [133],
    134: [134],
    135: [135],
    136: [136],
    137: [137],
    138: [138],
    139: [139],
    140: [140],
    141: [141],
    142: [142],
    143: [143],
    144: [144],
    145: [145],
    146: [146],
    147: [147],
    148: [148],
    149: [149],
    150: [150]
}

classes_exp0 = {
    0:"background",
    1: "wall",
    2: "building",
    3: "sky",
    4: "floor",
    5: "tree",
    6: "ceiling",
    7: "road",
    8: "bed ",
    9: "windowpane",
    10: "grass",
    11: "cabinet",
    12: "sidewalk",
    13: "person",
    14: "earth",
    15: "door",
    16: "table",
    17: "mountain",
    18: "plant",
    19: "curtain",
    20: "chair",
    21: "car",
    22: "water",
    23: "painting",
    24: "sofa",
    25: "shelf",
    26: "house",
    27: "sea",
    28: "mirror",
    29: "rug",
    30: "field",
    31: "armchair",
    32: "seat",
    33: "fence",
    34: "desk",
    35: "rock",
    36: "wardrobe",
    37: "lamp",
    38: "bathtub",
    39: "railing",
    40: "cushion",
    41: "base",
    42: "box",
    43: "column",
    44: "signboard",
    45: "chest of drawers",
    46: "counter",
    47: "sand",
    48: "sink",
    49: "skyscraper",
    50: "fireplace",
    51: "refrigerator",
    52: "grandstand",
    53: "path",
    54: "stairs",
    55: "runway",
    56: "case",
    57: "pool table",
    58: "pillow",
    59: "screen door",
    60: "stairway",
    61: "river",
    62: "bridge",
    63: "bookcase",
    64: "blind",
    65: "coffee table",
    66: "toilet",
    67: "flower",
    68: "book",
    69: "hill",
    70: "bench",
    71: "countertop",
    72: "stove",
    73: "palm",
    74: "kitchen island",
    75: "computer",
    76: "swivel chair",
    77: "boat",
    78: "bar",
    79: "arcade machine",
    80: "hovel",
    81: "bus",
    82: "towel",
    83: "light",
    84: "truck",
    85: "tower",
    86: "chandelier",
    87: "awning",
    88: "streetlight",
    89: "booth",
    90: "television receiver",
    91: "airplane",
    92: "dirt track",
    93: "apparel",
    94: "pole",
    95: "land",
    96: "bannister",
    97: "escalator",
    98: "ottoman",
    99: "bottle",
    100: "buffet",
    101: "poster",
    102: "stage",
    103: "van",
    104: "ship",
    105: "fountain",
    106: "conveyer belt",
    107: "canopy",
    108: "washer",
    109: "plaything",
    110: "swimming pool",
    111: "stool",
    112: "barrel",
    113: "basket",
    114: "waterfall",
    115: "tent",
    116: "bag",
    117: "minibike",
    118: "cradle",
    119: "oven",
    120: "ball",
    121: "food",
    122: "step",
    123: "tank",
    124: "trade name",
    125: "microwave",
    126: "pot",
    127: "animal",
    128: "bicycle",
    129: "lake",
    130: "dishwasher",
    131: "screen",
    132: "blanket",
    133: "sculpture",
    134: "hood",
    135: "sconce",
    136: "vase",
    137: "traffic light",
    138: "tray",
    139: "ashcan",
    140: "fan",
    141: "pier",
    142: "crt screen",
    143: "plate",
    144: "monitor",
    145: "bulletin board",
    146: "shower",
    147: "radiator",
    148: "glass",
    149: "clock",
    150: "flag"
}

class_remapping_exp1 = {
    255:[0],
    0: [1],
    1: [2],
    2: [3],
    3: [4],
    4: [5],
    5: [6],
    6: [7],
    7: [8],
    8: [9],
    9: [10],
    10: [11],
    11: [12],
    12: [13],
    13: [14],
    14: [15],
    15: [16],
    16: [17],
    17: [18],
    18: [19],
    19: [20],
    20: [21],
    21: [22],
    22: [23],
    23: [24],
    24: [25],
    25: [26],
    26: [27],
    27: [28],
    28: [29],
    29: [30],
    30: [31],
    31: [32],
    32: [33],
    33: [34],
    34: [35],
    35: [36],
    36: [37],
    37: [38],
    38: [39],
    39: [40],
    40: [41],
    41: [42],
    42: [43],
    43: [44],
    44: [45],
    45: [46],
    46: [47],
    47: [48],
    48: [49],
    49: [50],
    50: [51],
    51: [52],
    52: [53],
    53: [54],
    54: [55],
    55: [56],
    56: [57],
    57: [58],
    58: [59],
    59: [60],
    60: [61],
    61: [62],
    62: [63],
    63: [64],
    64: [65],
    65: [66],
    66: [67],
    67: [68],
    68: [69],
    69: [70],
    70: [71],
    71: [72],
    72: [73],
    73: [74],
    74: [75],
    75: [76],
    76: [77],
    77: [78],
    78: [79],
    79: [80],
    80: [81],
    81: [82],
    82: [83],
    83: [84],
    84: [85],
    85: [86],
    86: [87],
    87: [88],
    88: [89],
    89: [90],
    90: [91],
    91: [92],
    92: [93],
    93: [94],
    94: [95],
    95: [96],
    96: [97],
    97: [98],
    98: [99],
    99: [100],
    100: [101],
    101: [102],
    102: [103],
    103: [104],
    104: [105],
    105: [106],
    106: [107],
    107: [108],
    108: [109],
    109: [110],
    110: [111],
    111: [112],
    112: [113],
    113: [114],
    114: [115],
    115: [116],
    116: [117],
    117: [118],
    118: [119],
    119: [120],
    120: [121],
    121: [122],
    122: [123],
    123: [124],
    124: [125],
    125: [126],
    126: [127],
    127: [128],
    128: [129],
    129: [130],
    130: [131],
    131: [132],
    132: [133],
    133: [134],
    134: [135],
    135: [136],
    136: [137],
    137: [138],
    138: [139],
    139: [140],
    140: [141],
    141: [142],
    142: [143],
    143: [144],
    144: [145],
    145: [146],
    146: [147],
    147: [148],
    148: [149],
    149: [150],
}

classes_exp1 = {
    255:"background",
    0: "wall",
    1: "building",
    2: "sky",
    3: "floor",
    4: "tree",
    5: "ceiling",
    6: "road",
    7: "bed ",
    8: "windowpane",
    9: "grass",
    10: "cabinet",
    11: "sidewalk",
    12: "person",
    13: "earth",
    14: "door",
    15: "table",
    16: "mountain",
    17: "plant",
    18: "curtain",
    19: "chair",
    20: "car",
    21: "water",
    22: "painting",
    23: "sofa",
    24: "shelf",
    25: "house",
    26: "sea",
    27: "mirror",
    28: "rug",
    29: "field",
    30: "armchair",
    31: "seat",
    32: "fence",
    33: "desk",
    34: "rock",
    35: "wardrobe",
    36: "lamp",
    37: "bathtub",
    38: "railing",
    39: "cushion",
    40: "base",
    41: "box",
    42: "column",
    43: "signboard",
    44: "chest of drawers",
    45: "counter",
    46: "sand",
    47: "sink",
    48: "skyscraper",
    49: "fireplace",
    50: "refrigerator",
    51: "grandstand",
    52: "path",
    53: "stairs",
    54: "runway",
    55: "case",
    56: "pool table",
    57: "pillow",
    58: "screen door",
    59: "stairway",
    60: "river",
    61: "bridge",
    62: "bookcase",
    63: "blind",
    64: "coffee table",
    65: "toilet",
    66: "flower",
    67: "book",
    68: "hill",
    69: "bench",
    70: "countertop",
    71: "stove",
    72: "palm",
    73: "kitchen island",
    74: "computer",
    75: "swivel chair",
    76: "boat",
    77: "bar",
    78: "arcade machine",
    79: "hovel",
    80: "bus",
    81: "towel",
    82: "light",
    83: "truck",
    84: "tower",
    85: "chandelier",
    86: "awning",
    87: "streetlight",
    88: "booth",
    89: "television receiver",
    90: "airplane",
    91: "dirt track",
    92: "apparel",
    93: "pole",
    94: "land",
    95: "bannister",
    96: "escalator",
    97: "ottoman",
    98: "bottle",
    99: "buffet",
    100: "poster",
    101: "stage",
    102: "van",
    103: "ship",
    104: "fountain",
    105: "conveyer belt",
    106: "canopy",
    107: "washer",
    108: "plaything",
    109: "swimming pool",
    110: "stool",
    111: "barrel",
    112: "basket",
    113: "waterfall",
    114: "tent",
    115: "bag",
    116: "minibike",
    117: "cradle",
    118: "oven",
    119: "ball",
    120: "food",
    121: "step",
    122: "tank",
    123: "trade name",
    124: "microwave",
    125: "pot",
    126: "animal",
    127: "bicycle",
    128: "lake",
    129: "dishwasher",
    130: "screen",
    131: "blanket",
    132: "sculpture",
    133: "hood",
    134: "sconce",
    135: "vase",
    136: "traffic light",
    137: "tray",
    138: "ashcan",
    139: "fan",
    140: "pier",
    141: "crt screen",
    142: "plate",
    143: "monitor",
    144: "bulletin board",
    145: "shower",
    146: "radiator",
    147: "glass",
    148: "clock",
    149: "flag"
}



CLASS_INFO = [
    [class_remapping_exp0, classes_exp0, categories_exp0],  # Original classes
    [class_remapping_exp1, classes_exp1, categories_exp1]
]

CLASS_NAMES = [[CLASS_INFO[0][1][key] for key in sorted(CLASS_INFO[0][1].keys())],
               [CLASS_INFO[1][1][key] for key in sorted(CLASS_INFO[1][1].keys())]]

ADE20K_INFO = EasyDict(CLASS_INFO=CLASS_INFO, CLASS_NAMES=CLASS_NAMES)


class INFO():
    """ADE20K dataset.
    In segmentation map annotation for ADE20K, 0 stands for background, which
    is not included in 150 categories. ``reduce_zero_label`` is fixed to True.
    The ``img_suffix`` is fixed to '.jpg' and ``seg_map_suffix`` is fixed to
    '.png'.
    """
    CLASSES = (
        'wall', 'building', 'sky', 'floor', 'tree', 'ceiling', 'road', 'bed ',
        'windowpane', 'grass', 'cabinet', 'sidewalk', 'person', 'earth',
        'door', 'table', 'mountain', 'plant', 'curtain', 'chair', 'car',
        'water', 'painting', 'sofa', 'shelf', 'house', 'sea', 'mirror', 'rug',
        'field', 'armchair', 'seat', 'fence', 'desk', 'rock', 'wardrobe',
        'lamp', 'bathtub', 'railing', 'cushion', 'base', 'box', 'column',
        'signboard', 'chest of drawers', 'counter', 'sand', 'sink',
        'skyscraper', 'fireplace', 'refrigerator', 'grandstand', 'path',
        'stairs', 'runway', 'case', 'pool table', 'pillow', 'screen door',
        'stairway', 'river', 'bridge', 'bookcase', 'blind', 'coffee table',
        'toilet', 'flower', 'book', 'hill', 'bench', 'countertop', 'stove',
        'palm', 'kitchen island', 'computer', 'swivel chair', 'boat', 'bar',
        'arcade machine', 'hovel', 'bus', 'towel', 'light', 'truck', 'tower',
        'chandelier', 'awning', 'streetlight', 'booth', 'television receiver',
        'airplane', 'dirt track', 'apparel', 'pole', 'land', 'bannister',
        'escalator', 'ottoman', 'bottle', 'buffet', 'poster', 'stage', 'van',
        'ship', 'fountain', 'conveyer belt', 'canopy', 'washer', 'plaything',
        'swimming pool', 'stool', 'barrel', 'basket', 'waterfall', 'tent',
        'bag', 'minibike', 'cradle', 'oven', 'ball', 'food', 'step', 'tank',
        'trade name', 'microwave', 'pot', 'animal', 'bicycle', 'lake',
        'dishwasher', 'screen', 'blanket', 'sculpture', 'hood', 'sconce',
        'vase', 'traffic light', 'tray', 'ashcan', 'fan', 'pier', 'crt screen',
        'plate', 'monitor', 'bulletin board', 'shower', 'radiator', 'glass',
        'clock', 'flag')

    PALETTE = [[120, 120, 120], [180, 120, 120], [6, 230, 230], [80, 50, 50],
               [4, 200, 3], [120, 120, 80], [140, 140, 140], [204, 5, 255],
               [230, 230, 230], [4, 250, 7], [224, 5, 255], [235, 255, 7],
               [150, 5, 61], [120, 120, 70], [8, 255, 51], [255, 6, 82],
               [143, 255, 140], [204, 255, 4], [255, 51, 7], [204, 70, 3],
               [0, 102, 200], [61, 230, 250], [255, 6, 51], [11, 102, 255],
               [255, 7, 71], [255, 9, 224], [9, 7, 230], [220, 220, 220],
               [255, 9, 92], [112, 9, 255], [8, 255, 214], [7, 255, 224],
               [255, 184, 6], [10, 255, 71], [255, 41, 10], [7, 255, 255],
               [224, 255, 8], [102, 8, 255], [255, 61, 6], [255, 194, 7],
               [255, 122, 8], [0, 255, 20], [255, 8, 41], [255, 5, 153],
               [6, 51, 255], [235, 12, 255], [160, 150, 20], [0, 163, 255],
               [140, 140, 140], [250, 10, 15], [20, 255, 0], [31, 255, 0],
               [255, 31, 0], [255, 224, 0], [153, 255, 0], [0, 0, 255],
               [255, 71, 0], [0, 235, 255], [0, 173, 255], [31, 0, 255],
               [11, 200, 200], [255, 82, 0], [0, 255, 245], [0, 61, 255],
               [0, 255, 112], [0, 255, 133], [255, 0, 0], [255, 163, 0],
               [255, 102, 0], [194, 255, 0], [0, 143, 255], [51, 255, 0],
               [0, 82, 255], [0, 255, 41], [0, 255, 173], [10, 0, 255],
               [173, 255, 0], [0, 255, 153], [255, 92, 0], [255, 0, 255],
               [255, 0, 245], [255, 0, 102], [255, 173, 0], [255, 0, 20],
               [255, 184, 184], [0, 31, 255], [0, 255, 61], [0, 71, 255],
               [255, 0, 204], [0, 255, 194], [0, 255, 82], [0, 10, 255],
               [0, 112, 255], [51, 0, 255], [0, 194, 255], [0, 122, 255],
               [0, 255, 163], [255, 153, 0], [0, 255, 10], [255, 112, 0],
               [143, 255, 0], [82, 0, 255], [163, 255, 0], [255, 235, 0],
               [8, 184, 170], [133, 0, 255], [0, 255, 92], [184, 0, 255],
               [255, 0, 31], [0, 184, 255], [0, 214, 255], [255, 0, 112],
               [92, 255, 0], [0, 224, 255], [112, 224, 255], [70, 184, 160],
               [163, 0, 255], [153, 0, 255], [71, 255, 0], [255, 0, 163],
               [255, 204, 0], [255, 0, 143], [0, 255, 235], [133, 255, 0],
               [255, 0, 235], [245, 0, 255], [255, 0, 122], [255, 245, 0],
               [10, 190, 212], [214, 255, 0], [0, 204, 255], [20, 0, 255],
               [255, 255, 0], [0, 153, 255], [0, 41, 255], [0, 255, 204],
               [41, 0, 255], [41, 255, 0], [173, 0, 255], [0, 245, 255],
               [71, 0, 255], [122, 0, 255], [0, 255, 184], [0, 92, 255],
               [184, 255, 0], [0, 133, 255], [255, 214, 0], [25, 194, 194],
               [102, 255, 0], [92, 0, 255]]

    def __init__(self):
        self.img_suffix='.jpg',
        self.seg_map_suffix='.png',
        self.reduce_zero_label=True

def label_sanity_check(root=None):
    import cv2
    import warnings
    import pathlib
    import numpy as np
    warning = 0
    warning_msg = []
    if root == None:
        root = pathlib.Path(r"C:\Users\Theodoros Pissas\Documents\tresorit\PASCALC\val\label/")
    for path_to_label in root.glob('**/*.PNG'):
        i = cv2.imread(str(path_to_label))
        labels_present = np.unique(i)
        print(f'{path_to_label.stem} : {labels_present}')
        if max(labels_present) > 59:
            warnings.warn(f'invalid label found {labels_present}')
            warning += 1
            warning_msg.append(f'invalid label found {labels_present}')
    return warning_msg, warning

def class_dict_from_txt():
    d = dict()
    content = open('pascal.txt').read()
    print('{')
    for i in content.split('\n'):
        key = i.split(':')[0]
        val = i.split(':')[-1]
        # print(key, val)
        d[int(key)] = val
        val = val.replace(" ", "")
        print(f'{key}:"{val}",')
    print('}')

if __name__ == '__main__':
    # label_sanity_check()
    # class_dict_from_txt()

    # for i in classes_exp0:
    #     # for remapping
    #     # print(f'{i-1}:{[i]},')
    from utils import get_pascalc_colormap
    # A = PALETTE
    #     print(f'{i - 1}:"{classes_exp0[i]}",')
    for i, c in enumerate(INFO.CLASSES):
        # print(f'{i}: [{i+1}],')
        print(f'{i}:"{c}",')

